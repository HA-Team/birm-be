/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AuthenticateUserInput: { // input type
    password?: string | null; // String
    username?: string | null; // String
  }
  BirmsNearLocationInput: { // input type
    coordinates?: number[] | null; // [Float!]
    maxDistance?: number | null; // Int
  }
  CreateBirmInput: { // input type
    coordinates?: number[] | null; // [Float!]
    name?: string | null; // String
  }
  CreateUserInput: { // input type
    password?: string | null; // String
    username?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Account: {};
  AuthenticateUserPayload: { // root type
    token?: string | null; // String
  }
  Birm: { // root type
    id: string; // ID!
    location: NexusGenRootTypes['Location']; // Location!
    name: string; // String!
  }
  Location: { // root type
    coordinates: number[]; // [Float!]!
    type: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    _id?: string | null; // String
    id: string; // ID!
    username?: string | null; // String
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AuthenticateUserInput: NexusGenInputs['AuthenticateUserInput'];
  BirmsNearLocationInput: NexusGenInputs['BirmsNearLocationInput'];
  CreateBirmInput: NexusGenInputs['CreateBirmInput'];
  CreateUserInput: NexusGenInputs['CreateUserInput'];
}

export interface NexusGenFieldTypes {
  Account: { // field return type
    birms: NexusGenRootTypes['Birm'][]; // [Birm!]!
  }
  AuthenticateUserPayload: { // field return type
    token: string | null; // String
  }
  Birm: { // field return type
    id: string; // ID!
    location: NexusGenRootTypes['Location']; // Location!
    name: string; // String!
  }
  Location: { // field return type
    coordinates: number[]; // [Float!]!
    type: string; // String!
  }
  Mutation: { // field return type
    authenticate: NexusGenRootTypes['AuthenticateUserPayload']; // AuthenticateUserPayload!
    createBirm: NexusGenRootTypes['Birm']; // Birm!
    createUser: NexusGenRootTypes['User']; // User!
  }
  Query: { // field return type
    viewer: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    _id: string | null; // String
    account: NexusGenRootTypes['Account']; // Account!
    id: string; // ID!
    username: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Account: {
    birms: { // args
      input: NexusGenInputs['BirmsNearLocationInput']; // BirmsNearLocationInput!
    }
  }
  Mutation: {
    authenticate: { // args
      input: NexusGenInputs['AuthenticateUserInput']; // AuthenticateUserInput!
    }
    createBirm: { // args
      input: NexusGenInputs['CreateBirmInput']; // CreateBirmInput!
    }
    createUser: { // args
      input: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Account" | "AuthenticateUserPayload" | "Birm" | "Location" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = "AuthenticateUserInput" | "BirmsNearLocationInput" | "CreateBirmInput" | "CreateUserInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}